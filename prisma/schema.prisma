datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ScrapeInfo {
  id        String  @id @default(cuid())
  email     String  @unique
  cUserName String /// @encrypted
  cPass     String /// @encrypted
  cPassHash String? @unique /// @encryption:hash(cPass)
  provider  String
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Posts {
  id                String  @id @default(cuid())
  TerminalId        String  @unique
  userEmail         String
  storeName         String
  // storeLocation     String?
  cashBalance       String
  balType           String?
  estCashOut        String?
  lastCommunication String?
  lastCashWD        String?
  rejectBalance     String?
  balanceAsOf       String?
  Cassette1         String?
  minReload         String?
}
